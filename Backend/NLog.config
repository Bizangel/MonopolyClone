<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Info"
      internalLogFile="c:\temp\internal-nlog-AspNetCore.txt">

  <!-- enable asp.net core layout renderers -->
  <extensions>
    <add assembly="NLog.Web.AspNetCore"/>
  </extensions>

  <!-- the targets to write to -->
  <targets>
    <!-- File Target for all log messages with basic details -->
    <target xsi:type="File" name="allfile" fileName="${currentdir}/../logs/all/${shortdate}-log.txt"
            layout="${longdate}|${event-properties:item=EventId_Id:whenEmpty=0}|${level:uppercase=true}|${logger}|${message} ${exception:format=tostring}" />

    <target xsi:type="File" name="WarningErrorFile" fileName="${currentdir}/../logs/warnerror-log.txt"
           layout="[${longdate} ${level:uppercase=true}][${event-properties:item=EventId_Id:whenEmpty=0}]: [${logger}] ${message} ${exception:format=tostring}" />
            
    <!--Console Target for hosting lifetime messages to improve Docker / Visual Studio startup detection -->
    <target xsi:type="ColoredConsole" name="lifetimeConsole"
            layout="[${longdate} ${level:uppercase=true}][${event-properties:item=EventId_Id:whenEmpty=0}]: [${logger}] ${message} ${exception:format=tostring}">
      <highlight-row condition="level == LogLevel.Error" backgroundColor="NoChange" foregroundColor="Red"/>
    </target>

    <target xsi:type="ColoredConsole" name="microsoftLikeConsole" layout="${MicrosoftConsoleLayout}" >
      <highlight-row condition="level == LogLevel.Error" backgroundColor="NoChange" foregroundColor="Red"/>
    </target>
    
    
  </targets>

  <!-- rules to map from logger name to target -->
  <rules>
    <!--All logs, including from Microsoft-->
    <logger name="*" minlevel="Trace" writeTo="allfile, lifetimeConsole" />
    
    <!-- Other logs filter -->
    
    <!--Output hosting lifetime messages to console target for faster startup detection -->
    <logger name="Microsoft.Hosting.Lifetime" minlevel="Info" writeTo="lifetimeConsole" final="true" />
    <!--Skip non-critical Microsoft logs and so log only own logs (BlackHole) -->
    <logger name="Microsoft.*" maxlevel="Info" final="true" />
    <logger name="System.Net.Http.*" maxlevel="Info" final="true" />

    <logger name="*" minlevel="Warning" writeTo="WarningErrorFile" />
    
    <!--Make all rest of non-skipped logs go to console-->
    <logger name="*" minlevel="Trace" writeTo="lifetimeConsole" />
  </rules>
</nlog>